## VOS config
## 平台配置文件


## 设置平台名称
vos_name="VOS_PLAT"


#---- 告警模块配置 开始---------------------------------------------
## 告警定义文件
alarm_define_xml_file="AlarmTable.xml"

## 接收告警模块返回信息的模块，用于发trap
alarm_info_recv_module="TRAP_MODULE"

## 保存重要告警内存大小
importlog_size=0x6000

## 保存所有告警内存大小
eventlog_size=0x20000

## 下面三个文件相关API，采用文件保存日志的方式时才有效；采用数据保存方式时无效，可省略
## 将告警告警日志保存的API，原型  LONG func( CHAR *buf, LONG *len)，
## buf 待写数据，len buf的长度，返回值为实际写入的长度 
logsave_func="alarm_log_file_write"

## 读取上面保存的日志的API，原型  LONG func( CHAR *buf, LONG *len)
## buf 读入缓冲区，len buf的长度，返回值为实际读入的长度 
logread_func="alarm_log_file_read"

## 删除日志文件的API，原型  LONG func(VOID)
## 成功返回 0 ，失败返回 -1
logerase_func="alarm_log_file_erase"

## 当前告警最大条目，超过后告警不能再上报
event_active_list_size=1000

## 历史告警最大条目，超过后会覆盖
event_history_list_size=2000

## 事件最大条目，超过后会覆盖
event_event_list_size=3000

#---- 告警模块配置 结束---------------------------------------------


#---- CLI 模块配置开始----------------------------------------------

## 是否允许非本机IP登陆
cli_foreign_login_enable=1
cli_telnet_port = 9895
cli_host_name="host"
cli_product_name="product"
#---- CLI 模块配置结束----------------------------------------------

#---- socket 模块配置开始----------------------------------------------

## socket 个数
sock_array_size=50
#---- socket 模块配置结束----------------------------------------------

#---- DB 模块配置 开始---------------------------------------------
## 平台数据库文件路径
#db_file_path="../../platform/depends/config_template/vos.db"
db_file_path="./vos.db"

## 表定义文件
#db_table_define_xmlFile="../../platform/depends/config_template/db_table_define.xml"

## 表定义数据文件
#db_table_data_xmlFile="../../platform/depends/config_template/db_table_default_data.xml"

#---- DB模块配置 结束---------------------------------------------


#---- SYSLOG 模块配置开始----------------------------------------------

## Syslog最大存储数量
max_syslog_num=1000

## 开启Syslog的Debug模式
syslog_debug_mode=0

## 开放N_Syslog接口
enable_n_syslog=0

## Syslog存储路径
syslog_file_path="./Syslog"

## Syslog发送到远端服务器开关
syslog_to_server=0

## Syslog远端服务器地址
syslog_server_ip="10.170.6.44"

## Syslog远端服务器监听端口
syslog_server_port=6007

#---- SYSLOG 模块配置结束----------------------------------------------

#---- HOST task 模块配置 开始----------------------------------------------

#host task 消息队列大小
host_queue_size=512

#---- HOST task 模块配置 结束----------------------------------------------

#---- 内存管理 模块配置开始----------------------------------------------
## 各内存块大小的个数；要么全配置，要么全不配置；
## 内存总大小由程序计算得出，加上1M内存容错，体现在4K的个数比实际配置个数要多一些
#page_128K_num=100
#page_64K_num=200
#page_32K_num=300
#page_16K_num=400
#page_8K_num=259
#page_4K_num = 30000
#---- 内存管理 模块配置结束----------------------------------------------

#---------------配置OID  开始------------------------------------------------
OIDConfig:
{
        systemObject:
        {
                OID = [1, 3, 6, 1, 4, 1, 1, 1, 1]; // array
        }

	alarmModule:
	{
		OID = [1,3,6,1,4,1,1,5,2]; // array
	}

	ethPortModule:
        {
                OID = [1,3,6,1,4,1,1,5,3,1,1]; // array
        }

	boardModule:
        {
		boardInfoTable:
	        {
	                OID = [ 1, 3, 6, 1, 4, 1, 1, 5, 1, 1, 1 ]; // array
	        }

                boardHeal:
                {
                        OID = [ 1, 3, 6, 1, 4, 1, 1, 5, 1, 1, 2 ]; // array
                }

              	chipHeal:
                {
                        OID = [ 1, 3, 6, 1, 4, 1, 1, 5, 1, 1, 3 ]; // array
                }

                fpgaChipAsset:
                {
                        OID = [ 1, 3, 6, 1, 4, 1, 1, 5, 1, 2, 1 ]; // array
                }

                clockSync:
                {
                        OID = [ 1, 3, 6, 1, 4, 1, 1, 5, 1, 2, 2 ]; // array
                }
        }
	
};

#---------------配置OID  结束------------------------------------------------


#---- 平台适配层模块   开始-----------------------------------------
slot_inserted="CheckSlotInserted"
slot_type="GetBoardType"
slot_reset="BoardReset"
slot_open="BdDrvOpenBoard"
slot_close="BdDrvCloseBoard"
compare_version="BoardCompareVersion"
update_version="BoardUpdateVersion"
update_results="CheckFwUpdateState"
sw_version="GetBorardSwVersion"
module_serialno="GetBorardSerialNo"
manufacture_date="GetBorardManufactureDate"
hardware_version="GetBorardHardwareVersion"
module_name="GetBorardName"
module_have_cpu="CheckBoardHaveCpu"
before_inserted_proc="sys_before_module_inserted_proc_fun"
module_have_pp="CheckBoardHavePP"
module_have_fpgaPP="CheckBoardHaveFpgaPP"
module_port_type_num="GetBoardPortNum"
module_port_mac="GetBoardPortMacAddr"
module_hot_insert="hot_insert_ntfy_fun"
module_hot_pull="hot_pull_ntfy_fun"

#---- 平台适配层模块   结束-----------------------------------------


#---------- 产品模块   开始-----------------------------------------

sys_reset="sys_reset_fun"
product_type="get_product_type"
product_name="get_product_name"
product_devIndex="get_product_devIndex"
mib_product_type="sys_ProductToMibProduct"
max_slotnum="get_product_chassis_max_slotnum"
master_slotinfo="get_chassis_master_slotinfo"
local_module_slotno="get_local_module_slotno"
local_module_type="get_local_module_type"
local_module_workmode="get_local_module_workmode"
registered_proc="module_registered_proc_fun"
module_ready_proc="sys_ready_proc_fun"
running_proc="sys_running_proc_fun"


#---------- 产品模块   结束-----------------------------------------


## 是否监听控制台，APP 前台启动时才可用，仅供调试时使用
cli_console_enable=0


config_test_num=123

config_test_str="abcdefadg111"

config_test_fun="__test_add"



